diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..7abf257
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "syscall.h": "c",
+        "defs.h": "c",
+        "spinlock.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..b3663db 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..7b31dee 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            set_trace_syscall_num(int);
+int             copy_syscall_stat(uint64, struct syscall_stat*);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -139,6 +142,8 @@ int             argstr(int, char*, int);
 void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
+void            init_syscall_stats();
+int             get_syscall_stat(int, struct syscall_stat*);
 void            syscall();
 
 // trap.c
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..f363dc6 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -31,6 +31,8 @@ main()
     userinit();      // first user process
     __sync_synchronize();
     started = 1;
+    init_syscall_stats();
+    
   } else {
     while(started == 0)
       ;
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d1eff22 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 struct cpu cpus[NCPU];
 
@@ -322,6 +323,9 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  // copy trace_syscall_num
+  np->trace_syscall_num = p->trace_syscall_num;
+
   return pid;
 }
 
@@ -681,3 +685,18 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+set_trace_syscall_num(int n) 
+{
+  struct proc *p = myproc();
+  p->trace_syscall_num = n;
+}
+
+int
+copy_syscall_stat(uint64 addr, struct syscall_stat *st) {
+  struct proc *p = myproc();
+  if(copyout(p->pagetable, addr, (char *)st, sizeof(*st)) < 0)
+    return -1;
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..63ab53f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int trace_syscall_num;       // syscall number that needs to be traced
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..14d0566 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,10 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_stat.h"
+
+int print_arg;
+int arg_cnt;
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -57,6 +61,10 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  if (print_arg == 1 && *ip != -1) {
+    printf("%d, ", *ip);
+    arg_cnt++;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +74,10 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  if (print_arg == 1 && *ip != -1) {
+    printf("%p, ", *ip);
+    arg_cnt++;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -75,8 +87,16 @@ int
 argstr(int n, char *buf, int max)
 {
   uint64 addr;
+  int flag = print_arg;
+  print_arg = 0;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  int ret = fetchstr(addr, buf, max);
+  print_arg = flag;
+  if (print_arg == 1 && ret != -1) {
+    printf("%s, ", buf);
+    arg_cnt++;
+  }
+  return ret;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +121,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +148,130 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
 };
 
+static char *syscall_names[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "unlink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+  [SYS_trace]   "trace",
+  [SYS_history] "history",
+};
+
+static struct syscall_stat syscall_stats[SYS_CALL_COUNT];
+
+// called only from cpu0
+void init_syscall_stats() {
+  int i;
+  for (i = 1; i < SYS_CALL_COUNT; i++) {
+    acquire(&syscall_stats[i].lock);
+    strncpy(syscall_stats[i].syscall_name, syscall_names[i], strlen(syscall_names[i])+1);
+    syscall_stats[i].count = 0;
+    syscall_stats[i].accum_time = 0;
+    release(&syscall_stats[i].lock);
+  }
+}
+
+int
+get_syscall_stat(int num, struct syscall_stat *st) {
+  strncpy(st->syscall_name, syscall_stats[num].syscall_name, strlen(syscall_stats[num].syscall_name)+1);
+  acquire(&syscall_stats[num].lock);
+  st->count = syscall_stats[num].count;
+  st->accum_time = syscall_stats[num].accum_time;
+  release(&syscall_stats[num].lock);
+  // printf("For syscall %s, time is %d, cnt is %d\n", st->syscall_name, st->accum_time, st->count);
+  return 0;
+}
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
 
+  acquire(&p->lock);
+  int pid = p->pid;
+  release(&p->lock);
+
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    
+    // printf("\nsyscall is %s\n", syscall_names[num]);
+
+    acquire(&syscall_stats[num].lock);
+    syscall_stats[num].count++;
+    release(&syscall_stats[num].lock);
+    
+    uint ticks0, ticks1;
+
+    // check if this syscall is traced
+    if (num == p->trace_syscall_num) {
+      print_arg = 1;
+      arg_cnt = 0;
+      printf("pid: %d, syscall: %s, args: (", pid, syscall_names[num]);
+      
+      acquire(&tickslock);
+      ticks0 = ticks;
+      release(&tickslock);
+      
+      p->trapframe->a0 = syscalls[num]();
+
+      acquire(&tickslock);
+      ticks1 = ticks;
+      release(&tickslock);
+
+      if (arg_cnt > 0) {
+        // remove the trailing comma and space
+        printf("\b\b");
+      }
+      printf("), return: %d\n", p->trapframe->a0);
+      print_arg = 0;
+    }
+    else {
+      
+      acquire(&tickslock);
+      ticks0 = ticks;
+      release(&tickslock);
+      
+      p->trapframe->a0 = syscalls[num]();
+
+      acquire(&tickslock);
+      ticks1 = ticks;
+      release(&tickslock);
+
+    }
+
+    uint time_taken = ticks1 - ticks0;
+
+    // printf("For syscall %s, time is %d\n", syscall_names[num], time_taken);
+
+    acquire(&syscall_stats[num].lock);
+    syscall_stats[num].accum_time += time_taken;
+    release(&syscall_stats[num].lock);
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..d327541 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
+
+#define SYS_CALL_COUNT 24
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..0e2f37d
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,7 @@
+struct syscall_stat{
+    struct spinlock lock;
+    
+    char syscall_name[16]; // name of the system call
+    int count; // no. of times this system call has been called since boot
+    int accum_time; // total time taken by this system call
+};
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..16c37b6 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -72,10 +72,10 @@ sys_read(void)
   int n;
   uint64 p;
 
-  argaddr(1, &p);
-  argint(2, &n);
   if(argfd(0, 0, &f) < 0)
     return -1;
+  argaddr(1, &p);
+  argint(2, &n);
   return fileread(f, p, n);
 }
 
@@ -86,11 +86,11 @@ sys_write(void)
   int n;
   uint64 p;
   
-  argaddr(1, &p);
-  argint(2, &n);
   if(argfd(0, 0, &f) < 0)
     return -1;
-
+  argaddr(1, &p);
+  argint(2, &n);
+  
   return filewrite(f, p, n);
 }
 
@@ -113,9 +113,9 @@ sys_fstat(void)
   struct file *f;
   uint64 st; // user pointer to struct stat
 
-  argaddr(1, &st);
   if(argfd(0, 0, &f) < 0)
     return -1;
+  argaddr(1, &st);
   return filestat(f, st);
 }
 
@@ -310,9 +310,9 @@ sys_open(void)
   struct inode *ip;
   int n;
 
-  argint(1, &omode);
   if((n = argstr(0, path, MAXPATH)) < 0)
     return -1;
+  argint(1, &omode);
 
   begin_op();
 
@@ -394,13 +394,14 @@ sys_mknod(void)
   int major, minor;
 
   begin_op();
-  argint(1, &major);
-  argint(2, &minor);
   if((argstr(0, path, MAXPATH)) < 0 ||
      (ip = create(path, T_DEVICE, major, minor)) == 0){
     end_op();
     return -1;
   }
+  argint(1, &major);
+  argint(2, &minor);
+  
   iunlockput(ip);
   end_op();
   return 0;
@@ -438,10 +439,11 @@ sys_exec(void)
   int i;
   uint64 uargv, uarg;
 
-  argaddr(1, &uargv);
   if(argstr(0, path, MAXPATH) < 0) {
     return -1;
   }
+  argaddr(1, &uargv);
+  
   memset(argv, 0, sizeof(argv));
   for(i=0;; i++){
     if(i >= NELEM(argv)){
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..79d8447 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_stat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,42 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  
+  int syscall_num;
+  argint(0, &syscall_num);
+
+  // handle invalid argument
+  if (syscall_num < 0) {
+    return -1;
+  }
+
+  set_trace_syscall_num(syscall_num);
+  return 0;
+}
+
+extern struct syscall_stat syscall_stats[];
+
+uint64
+sys_history(void)
+{
+  
+  int syscall_num;
+  argint(0, &syscall_num);
+
+  // handle invalid argument
+  if (syscall_num < 0) {
+    return -1;
+  }
+
+  uint64 st; // user pointer to struct syscall_stat
+  argaddr(1, &st);
+
+  struct syscall_stat st2;
+  get_syscall_stat(syscall_num, &st2);
+  // printf("For syscall %s, time is %d, cnt is %d\n", st2.syscall_name, st2.accum_time, st2.count);
+  return copy_syscall_stat(st, &st2);
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..ca836b8
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,41 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/spinlock.h"
+#include "kernel/syscall_stat.h"
+#include "kernel/syscall.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+
+    struct syscall_stat st;
+
+    if (argc == 1) {
+        // history is called for all
+        int i;
+        for (i = 1; i < SYS_CALL_COUNT; i++) {
+            if (history(i, &st) < 0) {
+                fprintf(2, "%s: history failed\n", argv[0]);
+                exit(1);
+            }
+            printf("%d:\tsyscall: %s, #: %d, time: %d\n", i, st.syscall_name, st.count, st.accum_time);
+        }
+    }
+    else if(argc > 2 || (argv[1][0] < '0' || argv[1][0] > '9')){
+        fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+    else {
+        // history is called for a particular system call
+        int syscall_num = atoi(argv[1]);
+        if (history(syscall_num, &st) < 0) {
+            fprintf(2, "%s: history failed\n", argv[0]);
+            exit(1);
+        }
+        printf("%d:\tsyscall: %s, #: %d, time: %d\n", syscall_num, st.syscall_name, st.count, st.accum_time);
+    }
+
+    exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..d1d4d28 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, struct syscall_stat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..e2095e4 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
