diff --git a/Makefile b/Makefile
index 39a99d7..a3414d4 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..4c7eccc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            set_trace_syscall_num(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d216a47 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -322,6 +322,9 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  // copy trace_syscall_num
+  np->trace_syscall_num = p->trace_syscall_num;
+
   return pid;
 }
 
@@ -681,3 +684,10 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+set_trace_syscall_num(int n) 
+{
+  struct proc *p = myproc();
+  p->trace_syscall_num = n;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..63ab53f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int trace_syscall_num;       // syscall number that needs to be traced
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..8b21516 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,9 @@
 #include "syscall.h"
 #include "defs.h"
 
+int print_arg;
+int arg_cnt;
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -57,6 +60,10 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  if (print_arg == 1 && *ip != -1) {
+    printf("%d, ", *ip);
+    arg_cnt++;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +73,10 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  if (print_arg == 1 && *ip != -1) {
+    printf("%p, ", *ip);
+    arg_cnt++;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,7 +87,12 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  int ret = fetchstr(addr, buf, max);
+  if (print_arg == 1 && ret != -1) {
+    printf("%s, ", buf);
+    arg_cnt++;
+  }
+  return ret;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +117,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +143,32 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+};
+
+static char *syscall_names[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "unlink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+  [SYS_trace]   "trace",
 };
 
 void
@@ -134,11 +177,32 @@ syscall(void)
   int num;
   struct proc *p = myproc();
 
+  acquire(&p->lock);
+  int pid = p->pid;
+  release(&p->lock);
+
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    
+    // check if this syscall is traced
+    if (num == p->trace_syscall_num) {
+      print_arg = 1;
+      arg_cnt = 0;
+      printf("pid: %d, syscall: %s, args: (", pid, syscall_names[num]);
+      p->trapframe->a0 = syscalls[num]();
+      if (arg_cnt > 0) {
+        // remove the trailing comma and space
+        printf("\b\b");
+      }
+      printf("), return: %d\n", p->trapframe->a0);
+      print_arg = 0;
+    }
+    else {
+      p->trapframe->a0 = syscalls[num]();
+    }
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cc112b9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..a9fdf85 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  
+  int syscall_num;
+  argint(0, &syscall_num);
+
+  // handle invalid argument
+  if (syscall_num < 0) {
+    return -1;
+  }
+
+  set_trace_syscall_num(syscall_num);
+  return 0;
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..0bf4333 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..9c97b05 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
